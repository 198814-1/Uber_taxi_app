// Generated by CoffeeScript 1.7.1
(function () {
    var Logger, Utils, cookie, parseCookie, socketCore, socketio, gMaps, listTaxi = {};

    socketio = require('socket.io');
    var uuid = require("node-uuid");
    parseCookie = require('connect').utils.parseSignedCookies;

    cookie = require("cookie");

    Utils = require('../utils/utils').Utils;
    gMaps = require('../utils/gmaps').gMaps;

    Logger = require('../utils/logger');


    socketCore = function (httpServer, _sessionStore, _sessionSecret, appApi, User) {
        var crudSocket, io, logger, loggerSocket, socketClientList = {}, client = {}, rooms = {};

        io = socketio.listen(httpServer, {
            'transports': ['xhr-polling', 'polling', 'websocket', 'flashsocket'],
            'origins': '*:*'
        });

        // SOCKET IO Log Level
//        io.set('log level', 0);
        io.set('log level', 1);
        //io.set('log level', 2);
        //io.set('log level', 3);

        io.set('authorization', function (data, accept) {
            var access_token, ip;
            if (data && data.query && data.query.token) {
                access_token = data.query.token;
                ip = data.address.address;
                User.verifyToken(access_token, ip, function (error, result) {
                    if (error || !result) {
                        return accept("ERROR: " + error, false);
                    } else {
                        return accept(null, true);
                    }
                });
            } else {
                accept("NO_TOKEN", false);
            }
        });

        io.removeAllListeners();

        /*
         crudSocket = io.of('/crud'); // Set namespace for socket
         */
        loggerSocket = io.of('/logger'); // Set namespace for socket


        logger = Logger.inject();

        var socketConnection = {};

        /*
         * Main socket
         * */

        var listClient = {};

        listTaxi = {
            '30H-9599': {
                taxiId: '30H-9599',
                deviceId: '9992299222',
                taxiCompany: 1,
                carLic: '30H-9599',
                lat: 21.004027,
                lng: 105.823209,
                LatLng: '105.814261',
                taxi: 'Taxi Group',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 7,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/1.jpg'
            },
            '30H-9699': {
                taxiId: '30H-9699',
                deviceId: '999212299222',
                taxiCompany: 1,
                carLic: '30H-9699',
                lat: 21.004141,
                lng: 105.831084,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 7,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/2.jpg'
            },
            '30H-9799': {
                taxiId: '30H-9799',
                deviceId: '999212299222',
                taxiCompany: 1,
                carLic: '30H-9799',
                lat: 21.004228,
                lng: 105.827544,
                LatLng: '105.814261',
                taxi: 'Mỹ đình',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 4,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/3.jpg'
            },
            '30H-9899': {
                taxiId: '30H-9899',
                deviceId: '999212299222',
                taxiCompany: 1,
                carLic: '30H-9899',
                lat: 21.005950,
                lng: 105.823853,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 7,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/4.jpg'
            },
            '30H-9019': {
                taxiId: '30H-9019',
                deviceId: '999212299222',
                taxiCompany: 1,
                carLic: '30H-9019',
                lat: 21.002906,
                lng: 105.827415,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 4,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/5.jpg'
            },
            '30H-9029': {
                taxiId: '30H-9019',
                deviceId: '999212299222',
                taxiCompany: 1,
                carLic: '30H-9019',
                lat: 21.002906,
                lng: 105.824239,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 4,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/6.jpg'
            },
            '30H-9038': {
                taxiId: '30H-9038',
                deviceId: '9992112299222',
                taxiCompany: 1,
                carLic: '30H-9039',
                lat: 21.026124,
                lng: 105.798329,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 4,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/7.jpg'
            },
            '30H-9037': {
                taxiId: '30H-9037',
                deviceId: '999212ed299222',
                taxiCompany: 1,
                carLic: '30H-9037',
                lat: 21.025583,
                lng: 105.797728,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 4,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/8.jpg'
            },
            '30H-9036': {
                taxiId: '30H-9036',
                deviceId: '999212299222',
                taxiCompany: 1,
                carLic: '30H-9036',
                lat: 21.024622,
                lng: 105.797385,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 4,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/9.jpg'
            },
            '30H-9035': {
                taxiId: '30H-9035',
                deviceId: '999212299222',
                taxiCompany: 1,
                carLic: '30H-9039',
                lat: 21.023540,
                lng: 105.797793,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 4,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/10.jpg'
            },
            '30H-9034': {
                taxiId: '30H-9039',
                deviceId: '999212299222',
                taxiCompany: 1,
                carLic: '30H-9039',
                lat: 21.023440,
                lng: 105.798501,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 4,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/11.jpg',
                abc: 12

            },
            '30H-9039': {
                taxiId: '30H-9039',
                deviceId: '999212299222',
                taxiCompany: 1,
                carLic: '30H-9039',
                lat: 21.004989,
                lng: 105.823982,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 4,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/12.jpg'
            },
            '30H-9031': {
                taxiId: '30H-9031',
                deviceId: '999212299222',
                taxiCompany: 1,
                carLic: '30H-9031',
                lat: 21.022178,
                lng: 105.799509,
                LatLng: '105.814261',
                taxi: 'Mai Linh',
                hotline: 1900900,
                socketId: '11111111',
                seatNum: 4,
                status: 0 // 0: waiting, 1: running , 2: die
                ,avatar: '/uploads/avatar/13.jpg'
            }
        };

        /*for (var i = 0; i < 100; i++) {
         var rand = Math.round(Math.random() * 10);
         var rand2 = Math.round(Math.random() * 10);

         listTaxi['30H-904' + i] = {
         taxiId: '30H-904' + i,
         deviceId: '9992122992i' + i,
         taxiCompany: 1,
         carLic: '30H-904' + i,
         lat: parseInt('21.' + rand2 + '' + rand + '4989'),
         lng: parseInt('105.' + rand + '239' + rand2 + '2'),
         LatLng: '105.814261',
         taxi: 'Mai Linh',
         hotline: 1900900,
         socketId: '11111111',
         seatNum: 4,
         status: 0 // 0: waiting, 1: running , 2: die
         }
         }*/


        var findTaxi = function (socket, data) {
            Utils.logInfo('Find Taxi - deviceId : ' + data.deviceId);
            var listTaxiNearest = {};
            var filter = (data.filter) ? data.filter : 4;
            listTaxiNearest = gMaps.distanceFrom(listClient[data.deviceId], listTaxi, 10, filter); //

            //console.log('find:taxi', 'list:taxi', listTaxi);
            //console.log('find:taxi', 'listTaxiNearest', listTaxiNearest);

            var roomId = uuid(); // Random rooms name
            rooms[roomId] = {};
            for (var property in listTaxiNearest) {
                if (listTaxiNearest.hasOwnProperty(property) && socketConnection.hasOwnProperty(property)) {

                    rooms[roomId][property] = listTaxiNearest[property];
                    socketConnection[property].join(roomId);
                    //console.log('Room ' + property + 'has joined', Object.keys(io.sockets.manager.roomClients[listTaxi[property].socketId]).length);
                }
            }

            socket.join(roomId);
            listTaxiNearest.roomID = roomId;
            return listTaxiNearest;
        };


        io.on('connection', function (socket) {

                console.log('--socket.io ' + socket.id + ' connected');

                socket.on('socket', function (data) { // CRUD socketIO
                    var emit;
                    emit = 'socket:' + data.table + ':' + data.action;
                    Utils.logInfo('CRUD - socket:' + data.table + ':' + data.action);
                    socket.broadcast.emit(emit, data);
                });


                socket.on('taxi:send:location', function (info) {

                    var isNewTaxi = false;
                    if (!listTaxi.hasOwnProperty(info.carLic)) {
                        isNewTaxi = true;
                    }
                    socketConnection[info.carLic] = socket;
                    listTaxi[info.carLic] = {
                        taxiId: info.taxiId,
                        deviceId: info.deviceId,
                        taxiCompany: 1,
                        carLic: info.carLic,
                        lat: info.lat,
                        lng: info.lng,
                        LatLng: info.LatLng,
                        taxi: 'Mai Linh',
                        hotline: 1900900,
                        socketId: socket.id,
                        seatNum: info.seatNum,
                        status: info.status // 0: waiting, 1: running , 2: die
                    };

                    socket.broadcast.emit('taxi:send:location:manager', {
                        lat: info.lat,
                        lng: info.lng,
                        carLic: info.carLic,
                        seatNum: info.seatNum,
                        status: info.status,
                        isNew: isNewTaxi
                    });

                    var listRoomOfCar = Object.keys(io.sockets.manager.roomClients[listTaxi[info.carLic].socketId]);


                    for (var i = 0; i < listRoomOfCar.length; i++) { // Leave all room other of Taxi
                        if (listRoomOfCar[i] != '') {
                            var roomName = listRoomOfCar[i].substring(1);
                            socket.broadcast.to(roomName).emit('taxi:send:location', {LatLng: info.LatLng, taxi: info.carLic});
                        }
                    }

                    //socket.broadcast.emit('taxi:send:location', {LatLng: info.LatLng, taxi: info.carLic});
                });

                socket.on('send:location', function (info) { // Receipt location from client emit
                    /*console.log('send:location data', info);*/

                    var clientID = info.deviceId;
                    var carLic = info.carLic;

                    if (!info.driver) {

                        socketConnection[clientID] = socket;
                        listClient[clientID] = {
                            deviceId: clientID,
                            userId: info.clientId,
                            lat: info.lat,
                            lng: info.lng,
                            LatLng: info.LatLng,
                            socketId: socket.id,
                            status: info.status
                        };
                    } else {
                        socketConnection[carLic] = socket;

                        listTaxi[carLic] = {
                            taxiId: info.taxiId,
                            deviceId: info.deviceId,
                            taxiCompany: 1,
                            carLic: info.carLic,
                            lat: info.lat,
                            lng: info.lng,
                            LatLng: info.LatLng,
                            taxi: 'Mai Linh',
                            hotline: 1900900,
                            socketId: socket.id,
                            seatNum: info.seatNum,
                            status: info.status // 0: waiting, 1: running , 2: die
                        };
                    }
                });


                socket.on('find:taxi', function (data) {

                    // Get all taxi nearest and move it into a room. End step server will emit all taxi nearest to client

                    var listTaxi = findTaxi(socket, data);

                    socket.emit('send:taxi', listTaxi);
                    Utils.logInfo('send:taxi', ' success', true);

                });

                socket.on('call:taxi', function (data) {

                    /*
                     ==> data
                     customerDeviceId: config.deviceId,
                     roomID: listTaxi.roomID,
                     startPoint: gmaps.directionInfo.legs[0].start_address,
                     endPoint: gmaps.directionInfo.legs[0].end_address
                     */


                    // Reciept call action from customer and emit to all neastest taxi


                    var listTaxi = findTaxi(socket, {deviceId: data.customerDeviceId, filter: data.filter});
                    var clientID = data.customerDeviceId;
                    var clientInfo = listClient[clientID];

                    clientInfo.roomID = listTaxi.roomID;
                    clientInfo.customerDeviceId = clientID;
                    clientInfo.startPoint = data.startPoint;
                    clientInfo.endPoint = data.endPoint;


                    socket.emit('send:taxi', listTaxi);
                    ///socket.emit('send:roomID', listTaxi.roomID);
                    socket.broadcast.to(listTaxi.roomID).emit('customer:calling', clientInfo);
                    //console.log('start:call:taxi', data);
                });

                socket.on('check:taxiInRoom', function (data) {
                    var roomID = data.roomID;
                    socket.emit('list:taxi:accept', rooms[roomID]);
                });


                socket.on('taxi:denied', function (taxiInfo) {
                    socketConnection[taxiInfo.carLic].leave(taxiInfo.roomID);
                    delete rooms[taxiInfo.roomID][taxiInfo.carLic];
                });

                socket.on('taxi:accept', function (taxiInfo) {
                    socket.broadcast.to(taxiInfo.roomID).emit('taxi:choose:me', taxiInfo);
                    //io.sockets.socket(socketConnection[taxiInfo.customerDeviceId].id).emit('taxi:choose:me', taxiInfo);
                });

                socket.on('choose:taxi', function (data) {
                        Utils.logInfo('choose:taxi', 'start', true);

                        var carLic = data.carLic;
                        var customerDeviceId = data.customerDeviceId;

                        if (!data.isQuick) {

                            for (var property in rooms[data.roomID]) {
                                if (rooms[data.roomID].hasOwnProperty(property)) {
                                    if ((property !== carLic) && (property !== customerDeviceId)) { // All car other will leave room
                                        if (socketConnection.hasOwnProperty(property)) {
                                            socketConnection[property].leave(data.roomID);
                                            delete rooms[data.roomID][property];
                                        }
                                    }
                                }
                            }
                            var listRoomOfCar = Object.keys(io.sockets.manager.roomClients[listTaxi[carLic].socketId]),
                                listRoomOfCustomer = Object.keys(io.sockets.manager.roomClients[listClient[customerDeviceId].socketId]),
                                roomPrefix = '/' + data.roomID;


                            for (var i = 0; i < listRoomOfCar.length; i++) { // Leave all room other of Taxi

                                if (listRoomOfCar[i] != roomPrefix && listRoomOfCar[i] != '') {
                                    var roomName = listRoomOfCar[i].substring(1);
                                    Utils.logInfo('ListRoom of taxi begin ' + carLic, Object.keys(io.sockets.manager.roomClients[listTaxi[carLic].socketId]));
                                    Utils.logInfo('Leave all room other of Taxi', roomName);

                                    console.log('501 : User Has Left Room', roomName);

                                    socket.broadcast.to(roomName).emit('taxi:leave:room', {
                                        carLic: carLic
                                    });

                                    socketConnection[carLic].leave(roomName);

                                    Utils.logInfo('ListRoom Of taxi end ' + carLic, Object.keys(io.sockets.manager.roomClients[listTaxi[carLic].socketId]));
                                }
                            }

                            for (var j = 0; j < listRoomOfCustomer.length; j++) { // Leave all room other of Customer
                                if (listRoomOfCustomer[j] != roomPrefix && listRoomOfCustomer[j] !== '') {
                                    socketConnection[customerDeviceId].leave(listRoomOfCustomer[j]);
                                }
                            }
                        }

                        listTaxi[carLic].status = 1;
                        listClient[customerDeviceId].status = 1;
                        console.log(' ----- ---- ---- choose:taxi', 'broadcast');
                        socket.broadcast.to(data.roomID).emit('customer:choose:me', {
                            routeId: data.routeId,
                            customerDeviceId: data.customerDeviceId,
                            isQuick: data.isQuick,
                            lat: listClient[customerDeviceId].lat,
                            lng: listClient[customerDeviceId].lng,
                            roomID: data.roomID
                        });

                    }
                )
                ;

                socket.on('reconnect:route', function (connectData) {
                    //console.log('reconnect:route', connectData);
                    socket.join(connectData.roomID);
                    socket.emit('current:route:info', listTaxi[connectData.carLic]);
                });

                socket.on('destroy:route', function (destroyInfo) {
                    socket.broadcast.to(destroyInfo.roomID).emit('route:has:destroy', destroyInfo);

                    if (listTaxi.hasOwnProperty(destroyInfo.driver)) {
                        listTaxi[destroyInfo.driver].status = 0;
                    }

                    socket.leave(destroyInfo.roomID);
                });

                socket.on('taxi:start:route', function (routeInfo) {
                    socket.broadcast.to(routeInfo.roomID).emit('start:route', routeInfo);
                });

                socket.on('send:message', function (messageInfo) {

                    Utils.logInfo('send:message', 'messageInfo', messageInfo);

                    var emitData = {
                        from: messageInfo.from,
                        to: messageInfo.to,
                        name: messageInfo.name,
                        deviceId: messageInfo.deviceId,
                        content: messageInfo.content,
                        time: messageInfo.time,
                        status: 1
                    };
                    Utils.logInfo('send:message', 'to', socketConnection[emitData.to].id);
                    io.sockets.socket(socketConnection[emitData.to].id).emit('receipt:message', emitData);

                    Utils.logInfo('send:message', 'success', true);
                });

                socket.on('customer:destroy:route', function (destroyInfo) {
                    socket.broadcast.to(destroyInfo.roomID).emit('customer:destroy:route', {reason: destroyInfo.reason});

                    socket.leave(destroyInfo.roomID);
                });


                /*
                 *  Quick choose taxi
                 * */


                socket.on('quick:customer:choose:taxi', function (data) {
                    Utils.logInfo('quick:customer:choose:taxi', ' start', data);

                    var roomID = data.roomID,
                        carLic = data.carLic,
                        clientID = data.customerDeviceId,
                        clientInfo = listClient[clientID];


                    clientInfo.roomID = data.roomID;
                    clientInfo.customerDeviceId = clientID;
                    clientInfo.startPoint = data.startPoint;
                    clientInfo.endPoint = data.endPoint;


                    io.sockets.socket(socketConnection[carLic].id).emit('quick:customer:calling', clientInfo);
                    Utils.logInfo('quick:customer:choose:taxi', '  emit ', true);

                });

                socket.on('quick:taxi:accept:request', function (routeInfo) {
                    var roomId = routeInfo.roomID;
                    /*var listRoomOfCar = Object.keys(io.sockets.manager.roomClients[listTaxi[routeInfo.carLic].socketId]),
                     roomPrefix = '/' + routeInfo.roomID;


                     for (var i = 0; i < listRoomOfCar.length; i++) { // Leave all room other of Taxi

                     if (listRoomOfCar[i] != roomPrefix && listRoomOfCar[i] != '') {
                     var roomName = listRoomOfCar[i].substring(1);
                     Utils.logInfo('ListRoom of taxi begin ' + routeInfo.carLic, Object.keys(io.sockets.manager.roomClients[listTaxi[routeInfo.carLic].socketId]));
                     Utils.logInfo('Leave all room other of Taxi', roomName);

                     console.log('501 : User Has Left Room', roomName);

                     socket.broadcast.to(roomName).emit('taxi:leave:room', {
                     carLic: routeInfo.carLic
                     });

                     socketConnection[routeInfo.carLic].leave(roomName);

                     Utils.logInfo('ListRoom Of taxi end ' + routeInfo.carLic, Object.keys(io.sockets.manager.roomClients[listTaxi[routeInfo.carLic].socketId]));
                     }
                     }*/

                    socket.broadcast.to(roomId).emit('send:quick:taxi:accept:request', routeInfo);


                    /*for (var property in rooms[roomId]) {
                     if (rooms[roomId].hasOwnProperty(property)) {
                     console.log('quick:taxi:accept:request', rooms[roomId], property);
                     if ((property !== routeInfo.carLic) && (property !== routeInfo.customerDeviceId)) {
                     Utils.logInfo('quick:taxi:accept:request', rooms[roomId]);
                     console.log('quick:taxi:accept:request', rooms[roomId], property);

                     socketConnection[property].leave(roomId);
                     delete rooms[roomId][property];
                     }
                     }
                     }
                     */

                });

                socket.on('quick:send:route', function (data) {
                    Utils.logInfo('quick:send:route', ' start', true);
                    socket.broadcast.to(data.roomID).emit('send:quick:send:route', data);
                });

                socket.on('quick:taxi:reject', function (rejectData) {
                    var roomID = rejectData.roomID,
                        carLic = rejectData.carLic;

                    socket.broadcast.to(roomID).emit('send:quick:taxi:reject', rejectData);
                    if (socketConnection.hasOwnProperty(carLic)) {
                        //console.log('leave room', socketConnection[carLic]);
                        socketConnection[carLic].leave(roomID);
                    }
                });


                socket.on('taxi:logout', function (emitData) {

                    Utils.logInfo('taxi:logout', ' start ', emitData.carLic);

                    var carLic = emitData.carLic;

                    var listRoomOfCar = Object.keys(io.sockets.manager.roomClients[listTaxi[carLic].socketId]);


                    for (var i = 0; i < listRoomOfCar.length; i++) { // Leave all room other of Taxi
                        Utils.logInfo('taxi:logout', ' for ', listRoomOfCar[i]);
                        if (listRoomOfCar[i] != '') {
                            var roomName = listRoomOfCar[i].substring(1);

                            socketConnection[carLic].broadcast.to(roomName).emit('send:taxi:logout', {
                                carLic: carLic
                            });
                            socketConnection[carLic].leave(roomName);
                        }
                    }
                    listTaxi[carLic].status = 3;

                    Utils.logInfo('taxi:logout', ' end ', carLic);


                });

                socket.on('disconnect', function () {

                    var socketId = socket.id;
                    console.log('socketId disconnect to server', socketId);
                    var carInfo = {};
                    for (var property in listTaxi) {
                        if (listTaxi.hasOwnProperty(property)) {
                            if (listTaxi[property].socketId == socketId) {
                                carInfo = listTaxi[property];
                                Utils.logInfo('car disconnect to server', property);

                                var listRoomOfCar = Object.keys(io.sockets.manager.roomClients[listTaxi[property].socketId]);

                                for (var i = 0; i < listRoomOfCar.length; i++) { // Leave all room other of Taxi
                                    var roomName = listRoomOfCar[i].substring(1);
                                    if (listRoomOfCar[i] != '') {

                                        console.log('701 : User Has Left Room');
                                        socket.broadcast.to(roomName).emit('taxi:leave:room', {
                                            carLic: property
                                        });

                                        socket.leave(roomName);
                                        //Utils.logInfo('car disconnect to room ', roomName);
                                        listTaxi[property].status = 3;


                                        //Utils.logInfo('listTaxi ', listTaxi[property]);
                                    } else {
                                        //Utils.logInfo('roomName ', roomName)
                                    }
                                }

                                    socket.broadcast.emit('taxi:disconnect', {carLic: property});

                                delete listTaxi[property];
                                delete socketConnection[property];

                                Utils.logInfo('Taxi disconnect to sever', carInfo);
                            }
                        }
                    }
                })
            }
        )
        ;


        loggerSocket.on('connection', function (socket) {
            logger.setSocketIo(loggerSocket);

        });
    };


    var getTaxi = function () {
        return listTaxi;
    };
    exports.socketCore = socketCore;
    exports.listTaxi = getTaxi;

}
    ).
    call(this);

//# sourceMappingURL=socket.map

