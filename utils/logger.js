// Generated by CoffeeScript 1.7.1
(function () {
    var EventEmitter, Logger, Utils, serverConfig, winston, _, _allLogFilePath, _exceptionLogFilePath, _logger, _loggerInstance, _something,
        __hasProp = {}.hasOwnProperty,
        __extends = function ( child, parent ) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };

    _ = require('underscore');

    EventEmitter = require('events').EventEmitter;

    Utils = require('./utils').Utils;

    winston = require('winston');

    //require('winston-mongodb').MongoDB;

    serverConfig = require('../config/init').serverConfig;

    _allLogFilePath = serverConfig._apiServerPath + '/logs/all-logs.log';

    _exceptionLogFilePath = serverConfig._apiServerPath + '/logs/exceptions.log';

    _something = '';

    _logger = new winston.Logger({
        transports: [
            new winston.transports.File({
                filename: _allLogFilePath
            })
        ],
        exceptionHandlers: [
            new winston.transports.File({
                filename: _exceptionLogFilePath
            })
        ],
        exitOnError: false
    });

    Logger = (function ( _super ) {
        __extends(Logger, _super);

        function Logger( di ) {
            _logger.on('logging', (function ( _this ) {
                //console.log('-------------logging');
                return function ( transport, level, msg, meta ) {
                    //console.log('------------return transport');
                    if (_this.socketIo && transport.name === 'file') {
                        //console.log('-------------return transport');
                        _this.socketIo.emit("newLog", {
                            level: level,
                            message: msg
                        });
                    }
                };
            })(this));
        }

        Logger.prototype.socketIo = null;

        Logger.prototype.info = function ( msg, metadata ) {
            return _logger.info(msg);
        };

        Logger.prototype.warn = function ( msg, metadata ) {
            return _logger.warn(msg);
        };

        Logger.prototype.error = function ( msg, metadata ) {
            return _logger.error(msg);
        };

        Logger.prototype.setSocketIo = function ( socket ) {
            return this.socketIo = socket;
        };

        return Logger;

    })(EventEmitter);

    _loggerInstance = null;

    module.exports.inject = function ( di ) {
        if (!_loggerInstance) {
            _loggerInstance = new Logger(di);
        }
        return _loggerInstance;
    };

}).call(this);

//# sourceMappingURL=logger.map
