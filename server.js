// Generated by CoffeeScript 1.7.1

/*
 Requires Dependences Modules
 */

(function () {
    var CrudApi, MongooseCrud, MongooseDbProvider, Params, User, Utils, app, appApi, crossOriginAllower, express, fs, http, passport, path, server, serverConfig, sessionStore, socketCore, uuid, _ref;

    fs = require('fs');

    async = require('async');

    nodemailer = require('nodemailer');

    uuid = require('node-uuid');

    express = require('express');

    path = require('path');

    http = require('http');

    var os = require('os');

    var nodeExcel = require('excel-export');
    var fs = require('fs');

    var rp = require('./reporter/rpRouteHistory');


    /*
     (1) Thiết lập App
     */

    serverConfig = require('./config/init').serverConfig;


    /*
     Disable Redis for running in Windows
     redis = require("redis").createClient()
     RedisStore = require("connect-redis")(express)
     _redisStore = new RedisStore({ host: 'localhost', port: 6379, client: redis })
     */


    /*
     (2) Loading Utils
     */

    Utils = require('./utils/utils').Utils;


    /*
     (3) Phân tích các Params URL được gửi lên (Loading Params)
     */

    Params = require('./crud/params').Params;


    /*
     (4) Xác thực & Phân quyền URL đã request (Authentication & Authorization User)
     */

    _ref = require('./user/component'), passport = _ref.passport, User = _ref.User;
    var _refD = require('./user/driverComponent'),
        passportDriver = _refD.passport,
        Driver = _refD.Driver;


    /*
     (5) Thực hiện ánh xạ CRUD với URL đã Request (Handle mapping CRUD with URL for request)
     */

    CrudApi = require('./crud/crud-api').CrudApi;


    /*
     (6) Xử lý CRUD request với Adapters [MongoDB] (Handle CRUD request with Adapter [MongoDB])
     */

    MongooseDbProvider = require('./config/db-provider-mongo').MongooseDbProvider;

    MongooseCrud = require('./adapter/mongoose-crud').MongooseCrud;


    /*
     (6) Loading Juggling Database and CRUD section - Not using YET as Redis
     */


    /*
     { JugglingDbProvider } = require './config/db-provider-juggling'
     { JugglingCrud } = require './api/juggling-crud'
     */


    /*
     (7) Khởi tạo "CRUD API Server" với tất cả URL request ( Constructor "CRUD API Server" with for all URL)

     @param: MongooseDbProvider  6.1: Khai báo các Schemas Mongodb
     @param: MongooseCRUD        6.2: Thực hiện CRUD với MongoDB
     @param: Params()            3  : Xử lý Param Query API
     */

    appApi = new CrudApi(MongooseDbProvider, new Params(), new MongooseCrud());


    /*
     (8) Loading User API using Mongoose Database
     */

    User.dbProvider = MongooseDbProvider;


    /*
     loading Plug-ins - this does not work at the moment - then commented
     */


    /*
     (9) Loading Cross Origin Resource Sharing Enable
     */

    crossOriginAllower = function (req, res, next) {
        var origin;
        origin = req.header('Origin', '*');
        if (origin === 'null') {
            origin = '*';
        }
        res.header('Access-Control-Allow-Origin', '*');
        res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
        res.header('Access-Control-Allow-Headers', 'Authorization, Content-Type, X-Requested-With, X-Session-Id');
        res.header('Access-Control-Expose-Headers', 'Location, X-Session-Id');
        if (req.method === 'OPTIONS') {
            res.header('Access-Control-Max-Age', 86400);
            return res.send(200);
        } else {
            return next();
        }
    };


    /*
     (10) Khai báo Server (Declare the Server)
     */

    app = express();

    server = http.createServer(app);


    /*
     (11) Configure the Server
     */

    module.exports = app.configure(function () {
        app.set("port", process.env.PORT || serverConfig._port);
        app.use(express.favicon());
        app.use(express.logger("dev"));
        app.use(express.bodyParser({
            uploadDir: serverConfig._apiServerPath + '/uploads'
        }));
        app.use(express.methodOverride());
        app.use(express.cookieParser(serverConfig._cookieSecret));
        app.use(express.session({
            secret: serverConfig._sessionSecret,
            key: 'connect.sid'
        }));
        app.use(passport.initialize());
        app.use(passportDriver.initialize());
        app.use(crossOriginAllower);
        app.use(app.router);
        return app.use(express["static"](path.join(serverConfig._apiServerPath, "public")));
    });


    /*
     (12) Loading socketCore Server
     */

    socketCore = require('./socket/socket').socketCore;

    sessionStore = null;

    socketCore(server, sessionStore, serverConfig._sessionSecret, appApi, User);


    /*
     (13) Khai báo Router (Declare Router)
     */


    /*
     (13.1) Login and Registration routing
     */
    app.use(express.static(__dirname + '/public'));


    app.get('/', function(req, res) {
        res.sendfile('index.html');
    });

    app.post('/logout', User.logout);


    app.post('/register', User.register);




        var smtpTransport = nodemailer.createTransport("SMTP",{
            service: "Gmail",
            auth: {
                user: "nga.vsoft@gmail.com",
                pass: "nduy.ngavsoft"
//                XOAuth2: {
//                    user: smtpConfig.user,
//                    clientId: smtpConfig.client_id,
//                    clientSecret: smtpConfig.client_secret,
//                    refreshToken: smtpConfig.refresh_token,
//                    accessToken: smtpConfig.access_token,
//                    timeout: smtpConfig.access_timeout - Date.now()
//                }
            }
        });

        // setup e-mail data with unicode symbols
        var mailOptions = {
            from: "Nga Nguyen Duy ✔ <kyo1508@gmail.com>", // sender address
            to: "nga.vsoft@gmail.com", // list of receivers
            subject: "Hello ✔", // Subject line
            text: "Hello world ✔", // plaintext body
            html: "<b>Hello world ✔</b>" // html body
        };

//        // send mail with defined transport object
//        smtpTransport.sendMail(mailOptions, function(error, response){
//            if(error){
//                console.log(error);
//            }else{
//                console.log("Message sent: " + response.message);
//            }
//
//            // if you don't want to use this transport object anymore, uncomment following line
//            //smtpTransport.close(); // shut down the connection pool, no more messages
//        });


    app.post('/sendMail', function(req, res) {
        //testSend();
        var mailOptions = {
            from: "Nga Nguyen Duy ✔ <nga.vsoft@gmail.com>", // sender address
            to: req.body.receiver, // list of receivers
            subject: req.body.title + " ✔", // Subject line
            text: req.body.content + " ✔", // plaintext body
            html: "<b>" + req.body.content + "✔</b>" // html body
        };

        smtpTransport.sendMail(mailOptions, function(error, response){
            if(error){
                //console.log(error);
                res.send("Loi: ", error);
            }else{
                // console.log("Message sent: " + response.message);
                res.send('Send message Successeful');
            }

            // if you don't want to use this transport object anymore, uncomment following line
            //smtpTransport.close(); // shut down the connection pool, no more messages
        });
        //res.json(mailOptions);
        //res.json(req.body.title);
        //console.log(req.body);
    });
    // Users

    app.post('/registerCustomer', User.registerCustomer);

    app.post('/login', passport.authenticate('local', {
        session: false
    }), User.authenticateSuccess);

    app.post('/managerRegister', User.registerManager);

    app.post('/managerLogin', passport.authenticate('manager-local', {
        session: false
    }), User.managerAuthenticateSuccess);

    // Drivers
    app.post('/registerDriver', User.registerDriver);
    app.post('/driverLogin', passport.authenticate('driver-local', {
        session: false
    }), User.driverAuthenticateSuccess);



    app.get('/report/:file', function(req, res) {
        var filename = req.params.file;
        var row = [];
        async.waterfall([
            function(callback) {
                MongooseDbProvider.RouteHistories.find()
                    .populate('customer')
                    .exec(function(err, data) {
                        async.forEach(data, function(item, next) {
                            var temp = [];
                            console.log(item);
                            temp.push(item.customer.username);
                            temp.push(item.startPoint);
                            temp.push(item.endPoint);
                            temp.push(item.startAt);
                            temp.push([item.endAt]);
                            row.push(temp);
                            next();
                        }, function(err) {
                            console.log('done');
                            callback(err, row);
                        });
                    });
            }
        ], function(err, respond){
            // res.json(respond);

            var conf ={};

            conf.stylesXmlFile = "styles.xml";
            conf.cols = [{
                caption: 'Thời gian bắt đầu',
                type: 'string',
                width: 20
            }, {
                caption: 'Thời gian kết thúc',
                type: 'string',
                width: 20
            },{
                caption:'Ho Ten Khach hang',
                type:'string',
                // beforeCellWrite:function(row, cellData){
                //     return cellData.toUpperCase();
                // },
                width: 30
            },{
                caption: 'Điểm bắt đầu',
                type: 'string',
                width: 30
            },{
                caption: 'Điểm kiết thúc',
                type: 'string',
                width: 30
            }, {
                caption: 'Độ Dài',
                type:'number'
            }//,{
                //     caption:'date',
                //     type:'date',
                //     beforeCellWrite:function(){
                //         var originDate = new Date(Date.UTC(1899,11,30));
                //         return function(row, cellData, eOpt){
                //             if (eOpt.reNum%2){
                //                 eOpt.styleIndex = 1;
                //             }
                //             else{
                //                 eOpt.styleIndex = 2;
                //             }
                //             if (cellData === null){
                //                 eOpt.cellType = 'string';
                //                 return 'N/A';
                //             } else
                //                 return (cellData - originDate) / (24 * 60 * 60 * 1000);
                //         };
                //     }()
                // }
                //,{
                // caption:'bool',
//        type:'bool'
//    }
                //          ,{
                // caption:'number',
                // type:'number'
//    }
            ];
            conf.rows = respond;
//            conf.rows = [
//                ['11h20 22/06/2014', '12h20 22/06/2014', 'Tran Nam', 'Nguyen Trai', 'Doi Can', 5]
//                // ['pi', new Date(Date.UTC(2013, 4, 1)), true, 3.14],
//                // ["e", new Date(2012, 4, 1), false, 2.7182],
//                // ["Tran Nam", new Date(Date.UTC(2013, 6, 9)), false, 1.61803],
//                // ["null date", null, true, 1.414]
//            ];
            var result = nodeExcel.execute(conf);
            res.setHeader('Content-Type', 'application/vnd.openxmlformats');
            res.setHeader("Content-Disposition", "attachment; filename=" + filename);
            res.end(result, 'binary');
        });
    });

    app.post('/registerSite', User.registerSite);



    app.get('/validate', User.validateToken);


    /*
     (13.2) File upload from clients
     */

    app.post('/file-upload', function (req, res) {
        var e, extName, fileName, fileNameLen, newFileName, startIdx, subDirName, target_path, thumbnail, tmp_path, url_path;
        subDirName = req.body.tableName;
        thumbnail = req.files.file;
        if (thumbnail) {
            fileName = thumbnail.name;
            fileNameLen = fileName.length;
            startIdx = fileNameLen - 3;
            extName = fileName.substr(startIdx, 3);
            newFileName = fileName; //uuid.v4();
            tmp_path = thumbnail.path;
            target_path = serverConfig._apiServerPath + '/public/images/' + subDirName + '/' + newFileName + '.' + extName;
            url_path = 'images/' + subDirName + '/' + newFileName + '.' + extName;
            try {
                fs.rename(tmp_path, target_path, function (err) {
                    var result;
                    if (err) {
                        console.log('upload file err', err);
                        res.send({
                            success: false,
                            message: err.toString(),
                            url: null
                        });
                    }
                    result = {};
                    result.url = url_path;
                    console.log('upload file ok', result);
                    res.send({
                        success: true,
                        message: null,
                        url: url_path
                    });


                });
            } catch (_error) {
                e = _error;
                console.log('upload file catch err', _error);
                res.send({
                    success: false,
                    message: e.toString(),
                    url: null
                });
            }
        } else {
            res.send({
                success: false,
                message: 'no upload file found',
                url: null
            });
        }
    });


    /*
     (13.3) Temporary disable for easing of test POST, PUT, DELETE
     */

    app.all(/^(\/api)/, User.restrict);
    app.all(/^(\/mq)/, User.restrict);


    /*
     (13.4) Application API routing section
     */

    app.get('/getTaxi', appApi.getListTaxi);
    app.get('/api/:collection?', appApi.query);


    app.get('/api/:collection?/:id', appApi.findOne);

    app.post('/api/:collection?', appApi.insert);

    app.put('/api/:collection?/:id', appApi.updateOne);

    app["delete"]('/api/:collection?', appApi.removeAll);

    app["delete"]('/api/:collection?/:id', appApi.remove);


    app.get('/mq/:multiQuery', appApi.multiQuery);

    app.get('/os', function (req, res, next) {
        var ret = {
            hostname: os.hostname(),
            platform: os.platform(),
            type: os.type(),
            loadAvg: os.loadavg(),
            totalMemory: os.totalmem() / 1024 / 1024 / 1024,
            freemem: os.freemem() / 1024 / 1024 / 1024,
            usageMem: ((os.totalmem() - os.freemem()) / 1024 / 1024 / 1024),
            cpus: os.cpus(),
            tmpdir: os.tmpdir(),
            networking: os.networkInterfaces(),
            uptime: os.uptime(),
            arch: os.arch(),
            release: os.release(),
            endianness: os.endianness(),
            status: 'ok'
        };
        res.json(ret);
    });

    //console.log('[1] serverConfig', serverConfig);
    /*
     (14) Start - Log
     */

    server.listen(app.get("port"), function () {
        var abc = 123;
        return Utils.writeLog("vFrameWork's server is listening on port " + app.get("port"));
    });

}).call(this);

//# sourceMappingURL=server.map
